# Import the required packages
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# create a new class initialized with 3 attributes: rho, mu, sig
class AR1_process:
    def __init__(self, rho, mu, sig):
        self.rho, self.mu, self.sig =  rho, mu, sig # initializing a set of vectors

    def stat_dist(self, Nx):
        #compute the mean and variance of normal distribution
        mu_stat =  self.mu/(1-self.rho)
        var_stat = self.sig**2/(1-self.rho**2)
        self.mu_stat = mu_stat #store them as an attribute in class
        self.var_stat = var_stat

        #create x_vec
        xmin = self.mu_stat - 5*(self.var_stat**0.5)
        xmax = self.mu_stat + 5*(self.var_stat**0.5)
        x_vec = np.linspace(xmin, xmax, num=Nx)
        #create pdf
        pdf_x = norm.pdf(x_vec,loc=self.mu_stat,scale=self.var_stat**0.5)

        return x_vec

    def dist_seq(self, z0, Nt, x_vec):
        mu_vec = np.zeros(Nt)
        mu_vec[0] = z0 #the state of the first period is given: the expected value of a constant is the constant  
        var_vec = np.zeros(Nt)
        var_vec[0] = 0 #the varaince of a constant is zero 
        pdf_mat = np.zeros((Nx,Nt))

        #step 1: compute z1 
        mu_vec[1] = self.rho*z0 + self.mu
        var_vec[1] = self.sig**2
        pdf_mat[:,1] = norm.pdf(x_vec, loc=mu_vec[1], scale=self.sig)

        #step2: compute z2...Zt
        i= 1
        while i < Nt-1:
          mu_vec[i+1] = self.rho*mu_vec[i] + self.mu
          var_vec[i+1] = self.rho**2*var_vec[i]+ self.sig**2
          pdf_mat[:,i+1] = norm.pdf(x_vec, loc=mu_vec[i+1], scale=var_vec[i+1]**0.5)
          i+=1
        
        return mu_vec, var_vec, pdf_mat 

    def sample_path(self, z0, Nt):
        #create an epsilon of Nt random numbers drawn from the normal distribution 
        #create the random variable 
        eps = norm.rvs(loc=self.mu, scale=self.sig, size=Nt) #scale indicates the standard deviation 

        #create a sample path for states 
        zt = np.zeros(Nt)
        zt[0] = z0

        #if Nt > 1: 
        #for j in range(1,100):
        j=1
        while j < Nt:
          zt[j]=self.rho*zt[j-1]+eps[j]
          j+=1     

        return zt  

# Defined the parameters for the AR1
rho = 0.9
mu = 0.1
sig = 0.5
Nt=100
z0=0

# create the AR1 process 
AR_1 = AR1_process(rho=rho, mu=mu, sig=sig)

# calculate the actual mean and variance from an AR(1) process using the parameters defined in the README
# create unconditional stationary distribution 
x_vec = AR_1.stat_dist(Nt)
#obtain dist_seq
mu_vec, var_vec, pdf_mat = AR_1.dist_seq(z0, Nt, x_vec)

# calculate the approximated mean and variance from an AR(1) process using the parameters defined in the README
# generate my sample path 
zt = AR_1.sample_path(z0=z0, Nt=Nt)

#step1: simulate Ns=100,000 sample paths, each for 100 periods 
Ns_2=100000
sample_path3 = np.zeros((Ns_2, Nt))
i=0
while i < Ns_2: 
  sample_path3[i,:] = AR_1.sample_path(z0=z0, Nt=Nt)
  i+=1

#step2: find the cross sectional mean for each period 
mu_t = np.zeros((Nt))
var_t = np.zeros((Nt))
temp= np.zeros((Ns_2))

i = 0 
while i < Nt: 
  mu_t[i] = sample_path3[:,i].sum()/Ns_2

  for j,k in enumerate(temp):
    temp[j]= (sample_path3[j,i]-mu_t[i])**2 

  var_t[i] = temp.sum()/Ns_2

  i+=1

#Find PDF  
#create the dimension for pdf
pdf_xj = np.zeros((Nx, Nt))
delt_xj = (x_vec.max()-x_vec.min())/(Nx-1)
denom = delt_xj*Ns_2

#for each period t=0,....,t=100
i=0
while i < Nt:
#for each xj-1 and xj, find the # of z inside 
    n0 = np.sum(sample_path3[:,i] <= x_vec[0])
    pdf_xj[0,i] = n0/denom

    n_nx = np.sum(sample_path3[:,i] > x_vec[99])
    pdf_xj[99,i] = n_nx/denom      

    j=1
    while j < 99:
      test = (x_vec[j-1] < sample_path3[:,i]) & (sample_path3[:,i] <= x_vec[j])
      n = np.sum(test)
      pdf_xj[j,i] = n/denom 
      j+=1

    i+=1

# Plot the actual and approximated unconditional means and variances. 
fig, (ax1, ax2)= plt.subplots(1, 2,figsize=(12,10))

ax1.set_title("Actual Unconditional Means and Variances")
ax1.plot(mu_vec,label="Mean")
ax1.plot(var_vec, label = "Variance")
ax1.legend()
ax1.grid()

ax2.set_title("Approximated Unconditional Means and Variances")
ax2.plot(mu_t,label="Mean")
ax2.plot(var_t,label = "Variance")
ax2.legend()
ax2.grid()

# Plot the actual and approximated unconditional pdfs. 
fig, (ax1, ax2)= plt.subplots(1, 2,figsize=(12,10))

i=1
ax1.set_title("Actual PDF")
while i < 100: 
  ax1.plot(x_vec,pdf_mat[:,i],color="orange",alpha=i*0.5)
  i+=1
#ax1.legend()
ax1.grid()

i=1
ax2.set_title("Approximated PDF")
while i < 100: 
  ax2.plot(x_vec,pdf_xj[:,i],color="blue",alpha=i*0.5)
  i+=1
ax2.grid()

# compute the stationary mean and variance from the simulated sample path
# step1: simulate Nt=100,000 sample paths, each for 100 periods 
Nt_2 = 100000
sample_path4 = np.zeros(Nt_2)
sample_path4 = AR_1.sample_path(z0=z0, Nt=Nt_2)

# step2: find the cross sectional mean for each period 
temp_2= np.zeros((Nt_2))
N_til = Nt_2-50+1
mu_t2 = sample_path4.sum()/N_til 
for j,z in enumerate(sample_path4):
  temp_2[j]= (z-mu_t2)**2
var_t2 = temp_2.sum()/Nt_2

# Find PDF  
# create the dimension for pdf
pdf_xj_2 = np.zeros((Nx))
denom_2 = delt_xj*N_til
# for each xj-1 and xj, find the # of z within
pdf_xj_2[0] = np.sum(sample_path4 <= x_vec[0])/denom_2
pdf_xj_2[99] = np.sum(sample_path4 > x_vec[99])/denom_2            
j=1
while j < 99:
  test = (x_vec[j-1] < sample_path4) & (sample_path4 <= x_vec[j])
  pdf_xj_2[j] = np.sum(test)/denom_2
  j+=1  

# Comparison of results 
print("\tilde{\mu}: " + str(mu_t2))
print("\tilde{\sigma}: " + str(var_t2))

print("\mu_{99}: " + str(mu_vec[99]))
print("\sigma_{99}: " + str(var_vec[99]))

print("\widehat{\mu_{99}: " + str(mu_t[99]))
print("\widehat{\sigma_{99}: " + str(var_t[99]))
